{"ast":null,"code":"var _jsxFileName = \"/opt/vinay/material-form/src/components/Table.js\";\n// import * as React from 'react';\n// import PropTypes from 'prop-types';\n// import { useTheme } from '@mui/material/styles';\n// import Box from '@mui/material/Box';\n// import Table from '@mui/material/Table';\n// import TableBody from '@mui/material/TableBody';\n// import TableCell from '@mui/material/TableCell';\n// import TableContainer from '@mui/material/TableContainer';\n// import TableFooter from '@mui/material/TableFooter';\n// import TablePagination from '@mui/material/TablePagination';\n// import TableRow from '@mui/material/TableRow';\n// import Paper from '@mui/material/Paper';\n// import IconButton from '@mui/material/IconButton';\n// import FirstPageIcon from '@mui/icons-material/FirstPage';\n// import KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\n// import KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\n// import LastPageIcon from '@mui/icons-material/LastPage';\n\n// function TablePaginationActions(props) {\n//   const theme = useTheme();\n//   const { count, page, rowsPerPage, onPageChange } = props;\n\n//   const handleFirstPageButtonClick = (event) => {\n//     onPageChange(event, 0);\n//   };\n\n//   const handleBackButtonClick = (event) => {\n//     onPageChange(event, page - 1);\n//   };\n\n//   const handleNextButtonClick = (event) => {\n//     onPageChange(event, page + 1);\n//   };\n\n//   const handleLastPageButtonClick = (event) => {\n//     onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n//   };\n\n//   return (\n//     <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n//       <IconButton\n//         onClick={handleFirstPageButtonClick}\n//         disabled={page === 0}\n//         aria-label=\"first page\"\n//       >\n//         {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n//       </IconButton>\n//       <IconButton\n//         onClick={handleBackButtonClick}\n//         disabled={page === 0}\n//         aria-label=\"previous page\"\n//       >\n//         {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n//       </IconButton>\n//       <IconButton\n//         onClick={handleNextButtonClick}\n//         disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n//         aria-label=\"next page\"\n//       >\n//         {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n//       </IconButton>\n//       <IconButton\n//         onClick={handleLastPageButtonClick}\n//         disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n//         aria-label=\"last page\"\n//       >\n//         {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n//       </IconButton>\n//     </Box>\n//   );\n// }\n\n// TablePaginationActions.propTypes = {\n//   count: PropTypes.number.isRequired,\n//   onPageChange: PropTypes.func.isRequired,\n//   page: PropTypes.number.isRequired,\n//   rowsPerPage: PropTypes.number.isRequired,\n// };\n\n// function createData(name, calories, fat) {\n//   return { name, calories, fat };\n// }\n\n// const rows = [\n//   createData('Cupcake', 305, 3.7),\n//   createData('Donut', 452, 25.0),\n//   createData('Eclair', 262, 16.0),\n//   createData('Frozen yoghurt', 159, 6.0),\n//   createData('Gingerbread', 356, 16.0),\n//   createData('Honeycomb', 408, 3.2),\n//   createData('Ice cream sandwich', 237, 9.0),\n//   createData('Jelly Bean', 375, 0.0),\n//   createData('KitKat', 518, 26.0),\n//   createData('Lollipop', 392, 0.2),\n//   createData('Marshmallow', 318, 0),\n//   createData('Nougat', 360, 19.0),\n//   createData('Oreo', 437, 18.0),\n// ].sort((a, b) => (a.calories < b.calories ? -1 : 1));\n\n// export default function CustomPaginationActionsTable() {\n//   const [page, setPage] = React.useState(0);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n//   // Avoid a layout jump when reaching the last page with empty rows.\n//   const emptyRows =\n//     page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n//   const handleChangePage = (event, newPage) => {\n//     setPage(newPage);\n//   };\n\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n\n//   return (\n//     <TableContainer component={Paper}>\n//       <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\n//         <TableBody>\n//           {(rowsPerPage > 0\n//             ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//             : rows\n//           ).map((row) => (\n//             <TableRow key={row.name}>\n//               <TableCell component=\"th\" scope=\"row\">\n//                 {row.name}\n//               </TableCell>\n//               <TableCell style={{ width: 160 }} align=\"right\">\n//                 {row.calories}\n//               </TableCell>\n//               <TableCell style={{ width: 160 }} align=\"right\">\n//                 {row.fat}\n//               </TableCell>\n//             </TableRow>\n//           ))}\n//           {emptyRows > 0 && (\n//             <TableRow style={{ height: 53 * emptyRows }}>\n//               <TableCell colSpan={6} />\n//             </TableRow>\n//           )}\n//         </TableBody>\n//         <TableFooter>\n//           <TableRow>\n//             <TablePagination\n//               rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n//               colSpan={3}\n//               count={rows.length}\n//               rowsPerPage={rowsPerPage}\n//               page={page}\n//               SelectProps={{\n//                 inputProps: {\n//                   'aria-label': 'rows per page',\n//                 },\n//                 native: true,\n//               }}\n//               onPageChange={handleChangePage}\n//               onRowsPerPageChange={handleChangeRowsPerPage}\n//               ActionsComponent={TablePaginationActions}\n//             />\n//           </TableRow>\n//         </TableFooter>\n//       </Table>\n//     </TableContainer>\n//   );\n// }\n\nimport { DataGrid } from '@mui/x-data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: 'id',\n  headerName: 'ID',\n  width: 70\n}, {\n  field: 'Name',\n  headerName: 'name',\n  width: 130\n},\n//   { field: 'lastName', headerName: 'Last name', width: 130 },\n{\n  field: 'age',\n  headerName: 'Age',\n  type: 'number',\n  width: 90\n}, {\n  field: 'Address',\n  headerName: 'Address',\n  description: 'This column has a value getter and is not sortable.',\n  sortable: false,\n  width: 160,\n  valueGetter: params => `${params.row.firstName || ''} ${params.row.lastName || ''}`\n}];\nconst rows = [{\n  id: 1,\n  Name: 'Jon',\n  age: 35\n}, {\n  id: 2,\n  Name: 'Cersei',\n  age: 42\n}, {\n  id: 3,\n  Name: 'Jaime',\n  age: 45\n}, {\n  id: 4,\n  Name: 'Arya',\n  age: 16\n}, {\n  id: 5,\n  Name: 'Daenerys',\n  age: null\n}, {\n  id: 6,\n  Name: null,\n  age: 150\n}, {\n  id: 7,\n  Name: 'Ferrara',\n  age: 44\n}, {\n  id: 8,\n  Name: 'Rossini',\n  age: 36\n}, {\n  id: 9,\n  Name: 'Harvey',\n  age: 65\n}];\nexport default function DataTable() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 400,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      initialState: {\n        pagination: {\n          paginationModel: {\n            page: 0,\n            pageSize: 5\n          }\n        }\n      },\n      pageSizeOptions: [5, 10],\n      checkboxSelection: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_c = DataTable;\nvar _c;\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"names":["DataGrid","jsxDEV","_jsxDEV","columns","field","headerName","width","type","description","sortable","valueGetter","params","row","firstName","lastName","rows","id","Name","age","DataTable","style","height","children","initialState","pagination","paginationModel","page","pageSize","pageSizeOptions","checkboxSelection","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/opt/vinay/material-form/src/components/Table.js"],"sourcesContent":["// import * as React from 'react';\n// import PropTypes from 'prop-types';\n// import { useTheme } from '@mui/material/styles';\n// import Box from '@mui/material/Box';\n// import Table from '@mui/material/Table';\n// import TableBody from '@mui/material/TableBody';\n// import TableCell from '@mui/material/TableCell';\n// import TableContainer from '@mui/material/TableContainer';\n// import TableFooter from '@mui/material/TableFooter';\n// import TablePagination from '@mui/material/TablePagination';\n// import TableRow from '@mui/material/TableRow';\n// import Paper from '@mui/material/Paper';\n// import IconButton from '@mui/material/IconButton';\n// import FirstPageIcon from '@mui/icons-material/FirstPage';\n// import KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\n// import KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\n// import LastPageIcon from '@mui/icons-material/LastPage';\n\n// function TablePaginationActions(props) {\n//   const theme = useTheme();\n//   const { count, page, rowsPerPage, onPageChange } = props;\n\n//   const handleFirstPageButtonClick = (event) => {\n//     onPageChange(event, 0);\n//   };\n\n//   const handleBackButtonClick = (event) => {\n//     onPageChange(event, page - 1);\n//   };\n\n//   const handleNextButtonClick = (event) => {\n//     onPageChange(event, page + 1);\n//   };\n\n//   const handleLastPageButtonClick = (event) => {\n//     onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n//   };\n\n//   return (\n//     <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n//       <IconButton\n//         onClick={handleFirstPageButtonClick}\n//         disabled={page === 0}\n//         aria-label=\"first page\"\n//       >\n//         {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n//       </IconButton>\n//       <IconButton\n//         onClick={handleBackButtonClick}\n//         disabled={page === 0}\n//         aria-label=\"previous page\"\n//       >\n//         {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n//       </IconButton>\n//       <IconButton\n//         onClick={handleNextButtonClick}\n//         disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n//         aria-label=\"next page\"\n//       >\n//         {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n//       </IconButton>\n//       <IconButton\n//         onClick={handleLastPageButtonClick}\n//         disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n//         aria-label=\"last page\"\n//       >\n//         {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n//       </IconButton>\n//     </Box>\n//   );\n// }\n\n// TablePaginationActions.propTypes = {\n//   count: PropTypes.number.isRequired,\n//   onPageChange: PropTypes.func.isRequired,\n//   page: PropTypes.number.isRequired,\n//   rowsPerPage: PropTypes.number.isRequired,\n// };\n\n// function createData(name, calories, fat) {\n//   return { name, calories, fat };\n// }\n\n// const rows = [\n//   createData('Cupcake', 305, 3.7),\n//   createData('Donut', 452, 25.0),\n//   createData('Eclair', 262, 16.0),\n//   createData('Frozen yoghurt', 159, 6.0),\n//   createData('Gingerbread', 356, 16.0),\n//   createData('Honeycomb', 408, 3.2),\n//   createData('Ice cream sandwich', 237, 9.0),\n//   createData('Jelly Bean', 375, 0.0),\n//   createData('KitKat', 518, 26.0),\n//   createData('Lollipop', 392, 0.2),\n//   createData('Marshmallow', 318, 0),\n//   createData('Nougat', 360, 19.0),\n//   createData('Oreo', 437, 18.0),\n// ].sort((a, b) => (a.calories < b.calories ? -1 : 1));\n\n// export default function CustomPaginationActionsTable() {\n//   const [page, setPage] = React.useState(0);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n//   // Avoid a layout jump when reaching the last page with empty rows.\n//   const emptyRows =\n//     page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n//   const handleChangePage = (event, newPage) => {\n//     setPage(newPage);\n//   };\n\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n\n//   return (\n//     <TableContainer component={Paper}>\n//       <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\n//         <TableBody>\n//           {(rowsPerPage > 0\n//             ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//             : rows\n//           ).map((row) => (\n//             <TableRow key={row.name}>\n//               <TableCell component=\"th\" scope=\"row\">\n//                 {row.name}\n//               </TableCell>\n//               <TableCell style={{ width: 160 }} align=\"right\">\n//                 {row.calories}\n//               </TableCell>\n//               <TableCell style={{ width: 160 }} align=\"right\">\n//                 {row.fat}\n//               </TableCell>\n//             </TableRow>\n//           ))}\n//           {emptyRows > 0 && (\n//             <TableRow style={{ height: 53 * emptyRows }}>\n//               <TableCell colSpan={6} />\n//             </TableRow>\n//           )}\n//         </TableBody>\n//         <TableFooter>\n//           <TableRow>\n//             <TablePagination\n//               rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n//               colSpan={3}\n//               count={rows.length}\n//               rowsPerPage={rowsPerPage}\n//               page={page}\n//               SelectProps={{\n//                 inputProps: {\n//                   'aria-label': 'rows per page',\n//                 },\n//                 native: true,\n//               }}\n//               onPageChange={handleChangePage}\n//               onRowsPerPageChange={handleChangeRowsPerPage}\n//               ActionsComponent={TablePaginationActions}\n//             />\n//           </TableRow>\n//         </TableFooter>\n//       </Table>\n//     </TableContainer>\n//   );\n// }\n\nimport { DataGrid } from '@mui/x-data-grid';\n\nconst columns = [\n  { field: 'id', headerName: 'ID', width: 70 },\n  { field: 'Name', headerName: 'name', width: 130 },\n//   { field: 'lastName', headerName: 'Last name', width: 130 },\n  {\n    field: 'age',\n    headerName: 'Age',\n    type: 'number',\n    width: 90,\n  },\n  {\n    field: 'Address',\n    headerName: 'Address',\n    description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    width: 160,\n    valueGetter: (params) =>\n      `${params.row.firstName || ''} ${params.row.lastName || ''}`,\n  },\n];\n\nconst rows = [\n  { id: 1,  Name: 'Jon', age: 35 },\n  { id: 2, Name: 'Cersei', age: 42 },\n  { id: 3, Name: 'Jaime', age: 45 },\n  { id: 4, Name: 'Arya', age: 16 },\n  { id: 5, Name: 'Daenerys', age: null },\n  { id: 6, Name: null, age: 150 },\n  { id: 7, Name: 'Ferrara', age: 44 },\n  { id: 8, Name: 'Rossini', age: 36 },\n  { id: 9, Name: 'Harvey', age: 65 },\n];\n\nexport default function DataTable() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        initialState={{\n          pagination: {\n            paginationModel: { page: 0, pageSize: 5 },\n          },\n        }}\n        pageSizeOptions={[5, 10]}\n        checkboxSelection\n      />\n    </div>\n  );\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,OAAO,GAAG,CACd;EAAEC,KAAK,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,KAAK,EAAE;AAAG,CAAC,EAC5C;EAAEF,KAAK,EAAE,MAAM;EAAEC,UAAU,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAI,CAAC;AACnD;AACE;EACEF,KAAK,EAAE,KAAK;EACZC,UAAU,EAAE,KAAK;EACjBE,IAAI,EAAE,QAAQ;EACdD,KAAK,EAAE;AACT,CAAC,EACD;EACEF,KAAK,EAAE,SAAS;EAChBC,UAAU,EAAE,SAAS;EACrBG,WAAW,EAAE,qDAAqD;EAClEC,QAAQ,EAAE,KAAK;EACfH,KAAK,EAAE,GAAG;EACVI,WAAW,EAAGC,MAAM,IACjB,GAAEA,MAAM,CAACC,GAAG,CAACC,SAAS,IAAI,EAAG,IAAGF,MAAM,CAACC,GAAG,CAACE,QAAQ,IAAI,EAAG;AAC/D,CAAC,CACF;AAED,MAAMC,IAAI,GAAG,CACX;EAAEC,EAAE,EAAE,CAAC;EAAGC,IAAI,EAAE,KAAK;EAAEC,GAAG,EAAE;AAAG,CAAC,EAChC;EAAEF,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,QAAQ;EAAEC,GAAG,EAAE;AAAG,CAAC,EAClC;EAAEF,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAG,CAAC,EACjC;EAAEF,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,MAAM;EAAEC,GAAG,EAAE;AAAG,CAAC,EAChC;EAAEF,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,UAAU;EAAEC,GAAG,EAAE;AAAK,CAAC,EACtC;EAAEF,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,IAAI;EAAEC,GAAG,EAAE;AAAI,CAAC,EAC/B;EAAEF,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,SAAS;EAAEC,GAAG,EAAE;AAAG,CAAC,EACnC;EAAEF,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,SAAS;EAAEC,GAAG,EAAE;AAAG,CAAC,EACnC;EAAEF,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,QAAQ;EAAEC,GAAG,EAAE;AAAG,CAAC,CACnC;AAED,eAAe,SAASC,SAASA,CAAA,EAAG;EAClC,oBACEjB,OAAA;IAAKkB,KAAK,EAAE;MAAEC,MAAM,EAAE,GAAG;MAAEf,KAAK,EAAE;IAAO,CAAE;IAAAgB,QAAA,eACzCpB,OAAA,CAACF,QAAQ;MACPe,IAAI,EAAEA,IAAK;MACXZ,OAAO,EAAEA,OAAQ;MACjBoB,YAAY,EAAE;QACZC,UAAU,EAAE;UACVC,eAAe,EAAE;YAAEC,IAAI,EAAE,CAAC;YAAEC,QAAQ,EAAE;UAAE;QAC1C;MACF,CAAE;MACFC,eAAe,EAAE,CAAC,CAAC,EAAE,EAAE,CAAE;MACzBC,iBAAiB;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACC,EAAA,GAhBuBf,SAAS;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}